class Solution {
public:
    vector<int> maximumBeauty(vector<vector<int>>& items, vector<int>& queries) {
        vector<int>ans;
        sort(items.begin(),items.end());
        
        
        int n=items.size();
        for(int i=0;i<n;i++){
            if(i==0) continue;
            items[i][1] = max(items[i-1][1], items[i][1]);
            
        }
        for(auto &priceReq : queries){
            vector<int>dummy(2);
            dummy[0]=priceReq;
            dummy[1]=INT_MAX;
            int ind = upper_bound(items.begin(), items.end(), dummy)-items.begin();
            ind--;
            if(ind >=0){
                ans.push_back(items[ind][1]);
            }
            else {
                ans.push_back(0);
            }
        }
        return ans;
        
    }
};



*****************************Two Pointer *********************

class Solution {
public:
    vector<int> maximumBeauty(vector<vector<int>>& items, vector<int>& queries) {
        sort(items.begin(), items.end());
         vector<int>ans(queries.size(), 0);
        vector<pair<int,int>>vec;
        for(int i=0;i<queries.size();i++){
            vec.push_back({queries[i], i});
        }
        sort(vec.begin(), vec.end());
        int i=0;
        int maxi=0;
        for(auto it:vec){
            int ind =it.second;
            int priceReq=it.first;
            while(i<items.size() && items[i][0] <=priceReq){
                maxi =max(maxi, items[i][1]);
                i++;
            }
            ans[ind]=maxi;
        }
        
        
        
        return ans;
    }
};
