class Solution {
private:
    long long f(int ind, int LastTime, vector<vector<int>> &rides, int n,vector<long long> &dp){
        if(ind == rides.size()){
            return 0;
        }
        if(dp[ind] != -1) return dp[ind];
        long long NotPerformJob =f(ind+1, LastTime, rides, n, dp);
        long long PerformJob=0;
        int ans = rides.size();
        int low=ind+1;
        int high = rides.size()-1;
        while(low <= high){
            int mid =(low+high)/2;
            if(rides[mid][0] >= rides[ind][1]){
                ans = mid;
                high = mid - 1;
                    
            }
            else {
                low = mid + 1;
            }
        }
        PerformJob =rides[ind][1] - rides[ind][0]+ rides[ind][2] + f(ans, rides[ind][1], rides,n, dp);
        
        return dp[ind] = max(PerformJob, NotPerformJob);
    }
public:
    long long maxTaxiEarnings(int n, vector<vector<int>>& rides) {
        sort(rides.begin(), rides.end());
        vector<long long>dp(rides.size(), -1);
        return f(0, 0, rides, n, dp);
        
    }
};
