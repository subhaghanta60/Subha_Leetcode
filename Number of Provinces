class Solution {
private:
    void dfs(int ind,int size,vector<vector<int>>& isConnected, vector<bool>&visited){
        visited[ind]= true;
        vector<int>adj;
        for(int i=0;i<size;i++){
            int x = isConnected[ind][i];
            if( x == 1){
                adj.push_back(i);
            }
        }
        for(auto &it :adj){
            if(!visited[it]){
                dfs(it,size,isConnected,visited);
            }
        }
    }
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n =isConnected.size();
        vector<bool>visited(n, false);
        int count =0;
        for(int i=0;i<n;i++){
            if(!visited[i]){
                count++;
                dfs(i,n,isConnected, visited);
            }
        }
        return count;
    }
};
