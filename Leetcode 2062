class Solution {
private:   
    bool IsVowel(char ch){
        return ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u';
    }
public:
    int countVowelSubstrings(string word) {
        int cnt =0;
        int n= word.size();
        for(int i=0;i<n;i++){
            set<char>st;
                for(int j =i; j<n;j++){
                    if(!IsVowel(word[j])) break;
                    st.insert(word[j]);
                    if(st.size() == 5) cnt++;
                }
        }
        return cnt;
        
    }
};


class Solution {
private:
    bool IsVowel(char ch){
        return ch=='a'||ch=='e'||ch=='i'||ch=='o'||ch=='u';
    }
private:
        int countAtMostKVowels(string s, int k){
            int i =0;
            unordered_map<char, int>vowelMap;
            int cnt=0;
            int n=s.size();
            for(int j=.0;j<n;j++){
                if(!IsVowel(s[j])){
                    vowelMap.clear();
                    i=j+1;
                    continue;
                }
                vowelMap[s[j]]++;
                while(vowelMap.size() >k){
                    vowelMap[s[i]]--;
                    if(vowelMap[s[i]]==0){
                        vowelMap.erase(s[i]);
                    }
                    i++;
                }
                cnt +=(j-i+1);
            }
            return cnt;
        }
public:
    int countVowelSubstrings(string word) {
        return  countAtMostKVowels(word, 5) - countAtMostKVowels(word, 4);
        
    }
};

