DIVOIDE MODULO METHOD(BROUT FORCE)
class Solution {
public:
    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {
        vector<vector<int>> ans;
        if((m * n) !=original.size()) return ans;
        
     int ind=0;
        for(int i=0;i<m;i++){
            vector<int>col;
            for(int j=0;j<n;j++){
                
                col.push_back(original[ind++]);
                    
            }
               ans.push_back(col);
        }
        return ans;
        
    }
};



OPTIMAL  :

class Solution {
public:
    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {
        vector<vector<int>> ans1;
        if((m * n) !=original.size()) return ans1;
        
        vector<vector<int>>ans(m,vector<int>(n,0));
        for(int i=0;i<original.size();i++){
            ans[i/n][i%n] = original[i];
        }
        
        
     
        return ans;
        
    }
};


