class Solution {
private:
    int func(int ind, vector<int>&nums,vector<int>&dp){
        if(ind >=nums.size()) {
            return 0;
        }
        if(dp[ind] !=-1) return dp[ind];
        int steal = nums[ind] + func(ind+2,nums,dp);
        int NotSteal = func(ind+1,nums,dp);
        
        return dp[ind]= max(steal, NotSteal);
    }
public:
    int rob(vector<int>& nums) {
        vector<int>dp(nums.size(), -1);
        return func(0,nums,dp);
        
    }
};
*************************
class Solution {
public:
    int rob(vector<int>& nums) {
       int n=nums.size();
        vector<int>dp(n+2, 0);
        dp[n]=0;
        dp[n+1]=0;
        for(int ind=n-1;ind>=0;ind--){
            dp[ind] =nums[ind]+ dp[ind+2];
            dp[ind]= max(dp[ind], dp[ind+1]);
        }
        return dp[0];
    }
};
*********************

class Solution {
public:
    int rob(vector<int>& nums) {
        int n=nums.size();
        int iplus1=0;
        int iplus2=0;
        for(int i=n-1;i>=0;i--){
            int curi=nums[i]+iplus2;
            curi = max(curi, iplus1);
            iplus2 = iplus1;
            iplus1 = curi;
        }
        return iplus1;
    }
};
