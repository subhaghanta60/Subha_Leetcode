class Solution {
private:
    bool isSafe1(int row, int col, vector<string>&board, int n){
        int duprow = row;
        int dupcol = col;
        while(row>=0 && col >=0){
            if(board[row][col] =='Q') return false;
            row--;
            col--;
        }
        col =dupcol;
        row=duprow;
        while(col >=0){
            if(board[row][col] =='Q') return false;
            col--;
        }
        row=duprow;
        col=dupcol;
        while(row <n && col>=0){
            if(board[row][col] =='Q') return false;
            row++;
            col--;
        }
        return true;
    }
private:
    void solve(int col, vector<string>&board, vector<vector<string>>&ans, int n){
        if(col==n){
            ans.push_back(board);
            return;
        }
        for(int row=0;row<n;row++){
            if(isSafe1(row,col,board,n)){
                board[row][col] ='Q';
                solve(col+1,board,ans,n);
                board[row][col]='.';
            }
        }
        
    }
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>>ans;
        vector<string>board(n);
        string s(n, '.');
        for(int i=0;i<n;i++){
            board[i]=s;
        }
        solve(0,board,ans,n);
        return ans;
        
    }
};

****************************************************************

class Solution {
private:
    void solve(int col, vector<string>&board,vector<vector<string>>&ans, vector<int>&LeftRow, vector<int>&UpperDiagonal, vector<int>&LowerDiagonal,int n){
        if(col == n){
            ans.push_back(board);
            return;
        }
        for(int row =0;row<n;row++){
            if(LeftRow[row]==0 && LowerDiagonal[row+col] == 0 && UpperDiagonal[n-1+col-row] == 0){
                board[row][col] ='Q';
                LeftRow[row] = 1;
                LowerDiagonal[row+col]=1;
                UpperDiagonal[n-1+col-row] =1;
                solve(col+1,board,ans,LeftRow,UpperDiagonal,LowerDiagonal,n);
                board[row][col]='.';
                LeftRow[row]=0;
                LowerDiagonal[row+col]=0;
                UpperDiagonal[n-1+col-row]=0;
                
            }
        }
    }
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>>ans;
        vector<string>board(n);
        string s(n,'.');
        for(int i=0;i<n;i++){
            board[i]=s;
        }
        vector<int>LeftRow(n,0),UpperDiagonal(2*n-1, 0), LowerDiagonal(2*n-1,0);
        
        solve(0,board,ans,LeftRow,UpperDiagonal,LowerDiagonal, n);
        return ans;
    }
};
