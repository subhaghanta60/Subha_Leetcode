class DSU {
private: vector<int>parent, size;
public:    
    DSU(int n){
        for(int i=0;i<=n;i++){
            parent.push_back(i);
            size.push_back(0);
        }
    }

     int findPar(int node){
        if(parent[node] == node) return node;
        return  parent[node] = findPar(parent[node]);
    }

     void unionSize(int u, int v) {
        int pu =findPar(u);
        int pv = findPar(v);
        
        if(pu == pv) return;
        
        if(size[pu] <size[pv]){
            parent[pu] =pv;
            size[pv] +=size[pu];
        }
        else {
            parent[pv] = pu;
            size[pu] +=size[pv];
        } 
    }
    
};

class Solution {
 public: 
    int removeStones(vector<vector<int>>& stones) {
        DSU dsu(20001);
        for(auto &it : stones){
            dsu.unionSize(it[0], it[1]+ 10001);
            
        }
        set<int>st;
        for(auto &it : stones){
            st.insert(dsu.findPar(it[0]));
        }
        int comps =st.size();
        return stones.size() - comps ;
    }
};
