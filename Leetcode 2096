/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    TreeNode* lca(TreeNode* node, int u, int v){
        if(node == NULL) return NULL;
        if(node->val == u || node->val == v) return node;
        
        TreeNode* l=lca(node->left, u,v);
        TreeNode* r=lca(node->right, u, v);
        if(l != NULL && r !=NULL) return node;
        if(l != NULL) return l;
        if(r != NULL) return r;
        return NULL;
    }
private:
    bool findPath(TreeNode* node, string &ans, int target){
        if(node->val == target) return true;
        if(node->left && findPath(node->left, ans, target) == true){
            ans +='L';
            return true;
        }
        if(node->right && findPath(node->right, ans,target) == true){
            ans += 'R';
            return true;
        }
        return false;
    }
public:
    string getDirections(TreeNode* root, int startValue, int destValue) {
        
        TreeNode* lc= lca(root,startValue, destValue);
        string pathS2Lc ="";
        string pathE2Lc ="";
        findPath(lc, pathS2Lc, startValue);
        findPath(lc, pathE2Lc, destValue);
        for(int i=0;i<pathS2Lc.size();i++) pathS2Lc[i] = 'U';
        reverse(pathE2Lc.begin(),pathE2Lc.end());
        string ans = pathS2Lc + pathE2Lc;
        return ans;
        
        
    }
};

******************************

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {

private:
    bool findPath(TreeNode* node, string &ans, int target){
        if(node->val == target) return true;
        if(node->left && findPath(node->left, ans, target) == true){
            ans +='L';
            return true;
        }
        if(node->right && findPath(node->right, ans,target) == true){
            ans += 'R';
            return true;
        }
        return false;
    }
public:
    string getDirections(TreeNode* root, int startValue, int destValue) {
        
        
        string pathS2Lc ="";
        string pathE2Lc ="";
        findPath(root, pathS2Lc, startValue);
        findPath(root, pathE2Lc, destValue);
        while(pathS2Lc.size() >0 && pathE2Lc.size() >0 && pathS2Lc.back() == pathE2Lc.back()){
            pathS2Lc.pop_back();
            pathE2Lc.pop_back();
        }
        for(int i=0;i<pathS2Lc.size();i++) pathS2Lc[i] = 'U';
        reverse(pathE2Lc.begin(),pathE2Lc.end());
        string ans = pathS2Lc + pathE2Lc;
        return ans;
        
        
    }
};
