class Solution {
private:
   struct myComp {
        bool operator() (const pair<int, string>& a, const pair<int, string>& b) {
            if(a.first != b.first) {
                return a.first > b.first;
            }
            else {
                return a.second < b.second;
            }
        }
    };
public:
    vector<string> topKFrequent(vector<string>& words, int k) {
        unordered_map<string, int>mpp;
        for(string &word: words){
            mpp[word]++;
        }
        
        priority_queue<pair<int, string>, vector<pair<int, string>>, myComp>pq;
        
        for(auto it= mpp.begin();it != mpp.end();it++){
            pq.push({it->second, it->first});
            if(pq.size()>k) pq.pop();
            
        }
        vector<string>ans;
        while(!pq.empty()){
            ans.insert(ans.begin(), pq.top().second);
            pq.pop();
        }
        return ans;
    }
};
