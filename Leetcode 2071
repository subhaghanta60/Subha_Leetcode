class Solution {
private:
    bool checkIfPosible(int noOfTasks, vector<int>&tasks, vector<int>&workers, int pills, int strength){
        multiset<int> ms(workers.end()- noOfTasks, workers.end());
        for(int i=noOfTasks-1;i>=0;i--){
            auto it= ms.end();
            it--;
            
            if(*it <tasks[i]){
                if(pills <=0) return false;
                it = ms.lower_bound(tasks[i] - strength);
                if(it == ms.end()){
                    return false;
                }
                pills--;
            }
            ms.erase(it);
        }
        return true;
    }
public:
    int maxTaskAssign(vector<int>& tasks, vector<int>& workers, int pills, int strength) {
        sort(workers.begin(),workers.end());
        sort(tasks.begin(),tasks.end());
        
        int low=0;
        int high =min(tasks.size(), workers.size());
        int ans=0;
        
        while(low<=high){
            
            int mid =low +(high-low)/2;
            if(checkIfPosible(mid,tasks,workers,pills,strength)){
                ans =mid;
                low =mid+1;
            }
            else {
                high = mid-1;
            }
            
      }
        return ans;
        
        
        
    }
};
